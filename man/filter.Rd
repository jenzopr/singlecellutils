% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter.R
\name{filter}
\alias{filter}
\alias{filter_features}
\alias{filter_samples}
\title{Functions to filter features or samples using \code{\link[genefilter]{genefilter}}.}
\usage{
filter_features(object, filters, exprs_values = "counts", tolerate = 0)

filter_samples(object, filters, exprs_values = "counts", tolerate = 0)
}
\arguments{
\item{object}{A \code{\link[SingleCellExperiment]{SingleCellExperiment}} object.}

\item{filters}{A named list. Names should be callable (filter) functions, list items should be named paramters.}

\item{exprs_values}{String indicating which \code{\link[SummarizedExperiment]{assay}} contains the data that should be used for filtering.}

\item{tolerate}{A number indicating how many failed filters should be toleated.}
}
\value{
A \code{\link[SingleCellExperiment]{SingleCellExperiment}} object with features or samples passing the filter(s).
}
\description{
The functions will assemble a (combined) filtering function from the inputs and then apply it to features/samples from the given \code{\link[SingleCellExperiment]{SingleCellExperiment}} object.
}
\details{
The list of filters should be of the format \code{list("package::function" = list(...))}. The filter functions described here will try to fetch the correct function from the associated package namespace before evaluation.
In case several filters are given, the filter functions allow to tolerate up to \code{tolerate} \emph{failing} filters. This is useful to implement \emph{OR} conjuctions between filters.
}
\examples{
\dontrun{
# Keep only features with an aggregated expression above 1000 counts.
obj <- filter_features(obj, list("EpOverA" = list(A = 1000)))

# Keep only features with an aggregated expression above 1000 counts and expression
# in at least in 10 samples.
obj <- filter_features(obj, list("EpOverA" = list(A = 1000), "genefilter::kOverA" = list(k=10, A=0)))

# Keep only features with an aggregated expression above 1000 counts or expression
# in at least in 10 samples (tolerate one being not met).
obj <- filter_features(obj, list("EpOverA" = list(A = 1000), "genefilter::kOverA" = list(k=10, A=0)), tolerate = 1)

# Keep only features with expression over 10 in at least 5 samples, using the fpkm assay.
obj <- filter_features(obj, list("genefilter::kOverA" = list(k=5, A=10)), exprs_values = "fpkm")

# Keep only samples that express at least 1000 features.
obj <- filter_samples(obj, list("genefilter::kOverA" = list(k = 1000, A=0))

# Keep only samples with at least 100000 counts across all features.
obj <- filter_samples(obj, list("EpOverA" = list(A = 100000)))
}
}
